// Code generated by sqlc. DO NOT EDIT.
// source: posts.sql

package repository

import (
	"context"
)

const createNewPosting = `-- name: CreateNewPosting :one
INSERT INTO posting(title, company_name, company_description, 
posting_description, salary)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5
    
)
RETURNING id, title, company_name, company_description, posting_description, salary
`

type CreateNewPostingParams struct {
	Title              string
	CompanyName        string
	CompanyDescription string
	PostingDescription string
	Salary             int32
}

func (q *Queries) CreateNewPosting(ctx context.Context, arg CreateNewPostingParams) (Posting, error) {
	row := q.db.QueryRowContext(ctx, createNewPosting,
		arg.Title,
		arg.CompanyName,
		arg.CompanyDescription,
		arg.PostingDescription,
		arg.Salary,
	)
	var i Posting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CompanyName,
		&i.CompanyDescription,
		&i.PostingDescription,
		&i.Salary,
	)
	return i, err
}

const deletePosting = `-- name: DeletePosting :one
DELETE FROM posting
WHERE id = $1
RETURNING id, title, company_name, company_description, posting_description, salary
`

func (q *Queries) DeletePosting(ctx context.Context, id int32) (Posting, error) {
	row := q.db.QueryRowContext(ctx, deletePosting, id)
	var i Posting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CompanyName,
		&i.CompanyDescription,
		&i.PostingDescription,
		&i.Salary,
	)
	return i, err
}

const getAllPostings = `-- name: GetAllPostings :many
SELECT id, title, company_name, company_description, posting_description, salary FROM posting
`

func (q *Queries) GetAllPostings(ctx context.Context) ([]Posting, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posting
	for rows.Next() {
		var i Posting
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CompanyName,
			&i.CompanyDescription,
			&i.PostingDescription,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyJobs = `-- name: GetCompanyJobs :many
SELECT id, title, company_name, company_description, posting_description, salary FROM posting 
WHERE company_name = $1
`

func (q *Queries) GetCompanyJobs(ctx context.Context, companyName string) ([]Posting, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyJobs, companyName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posting
	for rows.Next() {
		var i Posting
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CompanyName,
			&i.CompanyDescription,
			&i.PostingDescription,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobs = `-- name: GetJobs :many
SELECT id, title, company_name, company_description, posting_description, salary FROM posting 
WHERE company_name = $1 
AND title = $2
AND salary >= $3
`

type GetJobsParams struct {
	CompanyName string
	Title       string
	Salary      int32
}

func (q *Queries) GetJobs(ctx context.Context, arg GetJobsParams) ([]Posting, error) {
	rows, err := q.db.QueryContext(ctx, getJobs, arg.CompanyName, arg.Title, arg.Salary)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Posting
	for rows.Next() {
		var i Posting
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CompanyName,
			&i.CompanyDescription,
			&i.PostingDescription,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostingByID = `-- name: GetPostingByID :one
SELECT id, title, company_name, company_description, posting_description, salary FROM posting 
WHERE id = $1
`

func (q *Queries) GetPostingByID(ctx context.Context, id int32) (Posting, error) {
	row := q.db.QueryRowContext(ctx, getPostingByID, id)
	var i Posting
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CompanyName,
		&i.CompanyDescription,
		&i.PostingDescription,
		&i.Salary,
	)
	return i, err
}
